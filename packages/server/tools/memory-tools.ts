import { Redis } from '@upstash/redis';

// Configuraci√≥n de Redis para toda la gesti√≥n de memoria
let redis: Redis | null = null;
try {
   if (process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN) {
      redis = new Redis({
         url: process.env.UPSTASH_REDIS_REST_URL,
         token: process.env.UPSTASH_REDIS_REST_TOKEN,
      });
      console.log('‚úÖ Redis initialized for memory management');
   }
} catch (error) {
   console.warn('‚ö†Ô∏è Redis initialization failed:', error);
}

// Solo Redis para toda la gesti√≥n de memoria
console.log('üì¶ Usando Redis como √∫nico sistema de memoria');

// ===== HERRAMIENTAS DE MEMORIA =====

export const memoryTools = {
   // Tool 1: Almacenar informaci√≥n temporal (Redis)
   async storeShortTermMemory(conversationId: string, key: string, data: string): Promise<string> {
      try {
         if (!redis) {
            return 'Error: Redis no est√° configurado. Memoria temporal no disponible.';
         }

         const redisKey = `temp:${conversationId}:${key}`;
         await redis.setex(redisKey, 3600, data); // 1 hora de TTL

         console.log(`üíæ Stored short-term memory: ${redisKey}`);
         return `‚úÖ Informaci√≥n temporal almacenada exitosamente (clave: ${key}, v√°lida por 1 hora)`;
      } catch (error) {
         console.error('Error storing short-term memory:', error);
         return `‚ùå Error al almacenar informaci√≥n temporal: ${error instanceof Error ? error.message : 'Error desconocido'}`;
      }
   },

   // Tool 2: Recuperar informaci√≥n temporal (Redis)
   async getShortTermMemory(conversationId: string, key: string): Promise<string> {
      try {
         if (!redis) {
            return 'Error: Redis no est√° configurado. Memoria temporal no disponible.';
         }

         const redisKey = `temp:${conversationId}:${key}`;
         const data = await redis.get(redisKey);

         if (data) {
            console.log(`üì¶ Retrieved short-term memory: ${redisKey}`);
            return `üì¶ Informaci√≥n encontrada: ${data}`;
         } else {
            return `üîç No se encontr√≥ informaci√≥n temporal con la clave: ${key}`;
         }
      } catch (error) {
         console.error('Error retrieving short-term memory:', error);
         return `‚ùå Error al recuperar informaci√≥n temporal: ${error instanceof Error ? error.message : 'Error desconocido'}`;
      }
   },

   // Tool 3: Almacenar informaci√≥n personal de largo plazo (Redis)
   async storeLongTermMemory(userId: string, content: string, category: string): Promise<string> {
      try {
         if (!redis) {
            return 'Error: Redis no est√° configurado. Memoria de largo plazo no disponible.';
         }

         const key = `longterm:${userId}:${category}:${Date.now()}`;
         const dataToStore = {
            content,
            category,
            timestamp: new Date().toISOString(),
            userId,
            type: 'user_knowledge',
         };

         await redis.setex(key, 86400 * 30, JSON.stringify(dataToStore)); // 30 d√≠as
         console.log(`üíæ Stored long-term memory: ${category} for user ${userId}`);
         return `‚úÖ Informaci√≥n personal almacenada en memoria a largo plazo (categor√≠a: ${category})`;
      } catch (error) {
         console.error('Error storing long-term memory:', error);
         return `‚ùå Error al almacenar informaci√≥n personal: ${error instanceof Error ? error.message : 'Error desconocido'}`;
      }
   },

   // Tool 4: Buscar informaci√≥n personal de largo plazo (Redis)
   async searchLongTermMemory(userId: string, query: string): Promise<string> {
      try {
         if (!redis) {
            return 'Error: Redis no est√° configurado. Memoria de largo plazo no disponible.';
         }

         const pattern = `longterm:${userId}:*`;
         const keys = await redis.keys(pattern);

         if (keys.length === 0) {
            return `üîç No se encontr√≥ informaci√≥n personal para: "${query}"`;
         }

         const results = await Promise.all(
            keys.map(async (key) => {
               const data = await redis.get(key);
               return data ? JSON.parse(data as string) : null;
            })
         );

         const validResults = results.filter((r) => {
            return (
               r !== null &&
               r.content &&
               typeof r.content === 'string' &&
               r.content.toLowerCase().includes(query.toLowerCase())
            );
         });

         if (validResults.length === 0) {
            return `üîç No se encontr√≥ informaci√≥n personal relevante para: "${query}"`;
         }

         const formattedResults = validResults
            .slice(0, 5) // Limitar a 5 resultados
            .map((result, index) => {
               const timestamp = result.timestamp
                  ? new Date(result.timestamp).toLocaleDateString()
                  : 'Sin fecha';
               return `${index + 1}. [${result.category}] ${result.content} (${timestamp})`;
            })
            .join('\n');

         console.log(`üìã Found ${validResults.length} results for user ${userId}`);
         return `üìã Informaci√≥n personal encontrada:\n${formattedResults}`;
      } catch (error) {
         console.error('Error searching long-term memory:', error);
         return `‚ùå Error al buscar informaci√≥n personal: ${error instanceof Error ? error.message : 'Error desconocido'}`;
      }
   },

   // Tool 5: Obtener historial de conversaci√≥n (Redis)
   async getConversationHistory(conversationId: string): Promise<string> {
      try {
         if (!redis) {
            return 'Error: Redis no est√° configurado. Historial no disponible.';
         }

         const pattern = `chat:${conversationId}:*`;
         const keys = await redis.keys(pattern);

         if (keys.length === 0) {
            return `üîç No se encontr√≥ historial para la conversaci√≥n: ${conversationId}`;
         }

         const messages = await Promise.all(
            keys.map(async (key) => {
               const data = await redis.get(key);
               return data ? JSON.parse(data as string) : null;
            })
         );

         const validMessages = messages
            .filter((msg) => msg !== null)
            .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());

         if (validMessages.length === 0) {
            return `üîç No hay mensajes v√°lidos en el historial de la conversaci√≥n: ${conversationId}`;
         }

         const formattedHistory = validMessages
            .slice(-10)
            .map((msg, index) => {
               const time = new Date(msg.timestamp).toLocaleTimeString();
               const role = msg.role === 'user' ? 'üë§ Usuario' : 'ü§ñ Asistente';
               const content =
                  msg.content.substring(0, 100) + (msg.content.length > 100 ? '...' : '');
               return `${index + 1}. [${time}] ${role}: ${content}`;
            })
            .join('\n');

         console.log(`üìö Retrieved conversation history: ${validMessages.length} messages`);
         return `üìö Historial de conversaci√≥n (√∫ltimos ${validMessages.slice(-10).length} mensajes):\n${formattedHistory}`;
      } catch (error) {
         console.error('Error retrieving conversation history:', error);
         return `‚ùå Error al recuperar historial: ${error instanceof Error ? error.message : 'Error desconocido'}`;
      }
   },

   // Tool 6: Analizar y categorizar informaci√≥n del usuario
   async analyzeUserInfo(
      content: string
   ): Promise<{ shouldStore: boolean; category: string; reason: string }> {
      const personalPatterns = {
         personal_info: [
            /me llamo|mi nombre es/i,
            /soy de|vivo en|nacido en/i,
            /mi edad|tengo \d+ a√±os/i,
            /mi trabajo|trabajo en|trabajo como/i,
         ],
         preferences: [
            /me gusta|me encanta|prefiero/i,
            /no me gusta|odio|detesto/i,
            /mi favorito|mi preferido/i,
         ],
         skills: [
            /s√©|conozco|tengo experiencia/i,
            /programo en|uso|trabajo con/i,
            /especialista en|experto en/i,
         ],
         goals: [/quiero aprender|necesito|mi objetivo/i, /planeo|voy a|mi meta/i],
         coding_style: [/siempre uso|prefiero usar|mi estilo/i, /as√≠ es como|esta es mi forma/i],
      };

      for (const [category, patterns] of Object.entries(personalPatterns)) {
         for (const pattern of patterns) {
            if (pattern.test(content)) {
               return {
                  shouldStore: true,
                  category,
                  reason: `Informaci√≥n de ${category} detectada`,
               };
            }
         }
      }

      return {
         shouldStore: false,
         category: 'general',
         reason: 'No se detect√≥ informaci√≥n personal relevante',
      };
   },
};

// ===== DEFINICIONES DE TOOLS PARA GEMINI =====

export const geminiToolDefinitions = [
   {
      name: 'store_short_term_memory',
      description:
         'Almacena informaci√≥n temporal en Redis que ser√° √∫til durante la conversaci√≥n actual (TTL: 1 hora)',
      parameters: {
         type: 'object',
         properties: {
            conversationId: {
               type: 'string',
               description: 'ID de la conversaci√≥n actual',
            },
            key: {
               type: 'string',
               description: 'Clave √∫nica para identificar la informaci√≥n',
            },
            data: {
               type: 'string',
               description: 'Datos a almacenar temporalmente',
            },
         },
         required: ['conversationId', 'key', 'data'],
      },
   },
   {
      name: 'get_short_term_memory',
      description: 'Recupera informaci√≥n temporal almacenada en Redis durante la conversaci√≥n',
      parameters: {
         type: 'object',
         properties: {
            conversationId: {
               type: 'string',
               description: 'ID de la conversaci√≥n actual',
            },
            key: {
               type: 'string',
               description: 'Clave de la informaci√≥n a recuperar',
            },
         },
         required: ['conversationId', 'key'],
      },
   },
   {
      name: 'store_long_term_memory',
      description:
         'Almacena informaci√≥n personal importante del usuario en memoria de largo plazo (preferencias, datos personales, estilo de c√≥digo, etc.)',
      parameters: {
         type: 'object',
         properties: {
            userId: {
               type: 'string',
               description: 'ID √∫nico del usuario',
            },
            content: {
               type: 'string',
               description: 'Informaci√≥n personal a almacenar',
            },
            category: {
               type: 'string',
               description: 'Categor√≠a de la informaci√≥n',
               enum: ['personal_info', 'preferences', 'skills', 'goals', 'coding_style', 'general'],
            },
         },
         required: ['userId', 'content', 'category'],
      },
   },
   {
      name: 'search_long_term_memory',
      description: 'Busca informaci√≥n personal del usuario en memoria de largo plazo',
      parameters: {
         type: 'object',
         properties: {
            userId: {
               type: 'string',
               description: 'ID √∫nico del usuario',
            },
            query: {
               type: 'string',
               description: 'Consulta para buscar informaci√≥n relevante',
            },
         },
         required: ['userId', 'query'],
      },
   },
   {
      name: 'get_conversation_history',
      description: 'Obtiene el historial de la conversaci√≥n actual desde Redis',
      parameters: {
         type: 'object',
         properties: {
            conversationId: {
               type: 'string',
               description: 'ID de la conversaci√≥n',
            },
         },
         required: ['conversationId'],
      },
   },
];

// ===== EJECUTOR DE TOOLS =====

export async function executeMemoryTool(
   toolName: string,
   parameters: Record<string, unknown>
): Promise<string> {
   try {
      switch (toolName) {
         case 'store_short_term_memory':
            return await memoryTools.storeShortTermMemory(
               parameters.conversationId as string,
               parameters.key as string,
               parameters.data as string
            );

         case 'get_short_term_memory':
            return await memoryTools.getShortTermMemory(
               parameters.conversationId as string,
               parameters.key as string
            );

         case 'store_long_term_memory':
            return await memoryTools.storeLongTermMemory(
               parameters.userId as string,
               parameters.content as string,
               parameters.category as string
            );

         case 'search_long_term_memory':
            return await memoryTools.searchLongTermMemory(
               parameters.userId as string,
               parameters.query as string
            );

         case 'get_conversation_history':
            return await memoryTools.getConversationHistory(parameters.conversationId as string);

         default:
            return `‚ùå Tool desconocida: ${toolName}`;
      }
   } catch (error) {
      console.error(`Error executing tool ${toolName}:`, error);
      return `‚ùå Error ejecutando tool ${toolName}: ${error instanceof Error ? error.message : 'Error desconocido'}`;
   }
}
